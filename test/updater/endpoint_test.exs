defmodule ExaggerateTest.Updater.EndpointTest do
  use ExUnit.Case

  @updated_routes """
  {
    "openapi": "3.0",
    "info": {
      "title": "api",
      "version": "0.1.0"
    },
    "consumes": [
      "application/json"
    ],
    "basePath": "/",
    "produces": [
      "application/json"
    ],
    "schemes": [
      "http", "https"
    ],
    "paths": {
      "/foo": {
        "get": {
          "operationId": "foo",
          "description": "does the foo thing",
          "responses": {
            "500": {"description": "server error"}
          }
        }
      },
      "/bar": {
        "get": {
          "operationId": "bar",
          "description": "does the bar thing",
          "responses": {
            "500": {"description": "server error"}
          }
        }
      }
    }
  }
  """

  @starting_code """
  #
  # NB. this file is autogenerated from `controller_api.json`, altering
  # the structure or arrangement of the methods in this file can
  # cause problems.
  #

  defmodule Test.TestWeb.Endpoint do

    @moduledoc false

    @some_things_here

    @spec foo(Plug.conn) :: {:ok, map}
    def foo(_conn) do
      # we have implemented a foo method.
      {:ok, %{}}
    end
  end
  """

  @finishing_code """
  #
  # NB. this file is autogenerated from `controller_api.json`, altering
  # the structure or arrangement of the methods in this file can
  # cause problems.
  #

  defmodule Test.TestWeb.Endpoint do
    @moduledoc false

    @some_things_here

    @spec foo(Plug.conn()) :: {:ok, map}
    def foo(_conn) do
      # we have implemented a foo method.
      {:ok, %{}}
    end

    def bar(_conn) do
      # autogen function.
      # insert your code here, then delete
      # the next exception:
      raise "error: bar not implemented"
    end
  end
  """

  describe "code analysis components work as expected" do
    test "list endpoints" do
      endpoints = @updated_routes
      |> Jason.decode!
      |> Exaggerate.Updater.list_endpoints

      assert ["bar", "foo"] == endpoints
    end

    test "find calls" do
      calls = Exaggerate.Updater.find_calls(@starting_code)
      assert ["foo"] == calls
    end
  end

  test "an empty routes file is correctly updated" do
    assert @finishing_code == Exaggerate.Updater.update_endpoint(@starting_code, @updated_routes)
  end

  test "an updated routes file is untouched" do
    assert @finishing_code == Exaggerate.Updater.update_endpoint(@finishing_code, @updated_routes)
  end
end
